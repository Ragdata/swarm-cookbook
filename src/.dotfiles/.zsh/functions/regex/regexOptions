# undefined
builtin autoload -X

local isOPT='^(-([A-Za-z]+)[\s]?([A-Za-z0-9_\.]*))$|^(--(([A-Za-z0-9_\.]+)=?([A-Za-z0-9_\.]*)))$'
local isOPTNOVAL='^(-([A-Za-z]))$|^(--([A-Za-z0-9_\.]+))$'
local isOPTVAL='^(-([A-Za-z])[\s]([A-Za-z0-9_\.]+))$|^(--([A-Za-z0-9_\.]+)=([A-Za-z0-9_\.]+))$'
local isSOPT='^(-([A-Za-z]+)[\s]?([A-Za-z0-9_\.]*))$'
local isSOPTNOVAL='^(-([A-Za-z]+))$'
local isSOPTVAL='^(-([A-Za-z]+)\s([A-Za-z0-9_\.]*))$'
local isLOPT='^(--([A-Za-z0-9_\.]+)[=]?([A-Za-z0-9_\.]*))$'
local isLOPTNOVAL='^(--([A-Za-z0-9_\.]+))$'
local isLOPTVAL='^(--([A-Za-z0-9_\.]+)=([A-Za-z0-9_\.]*))$'

[[ -n "${!1}" ]] && { printf '%s' "${!1}"; return 0; } || return 1
# ==================================================================
# FUNCTION ALIASES
# ==================================================================
regex::isOPT()			{ regex::options isOPT; }
regex::isOPTNOVAL()		{ regex::options isOPTNOVAL; }
regex::isOPTVAL()		{ regex::options isOPTVAL; }
regex::isSOPT()			{ regex::options isSOPT; }
regex::isSOPTNOVAL()	{ regex::options isSOPTNOVAL; }
regex::isSOPTVAL()		{ regex::options isSOPTVAL; }
regex::isLOPT()			{ regex::options isLOPT; }
regex::isLOPTNOVAL()	{ regex::options isLOPTNOVAL; }
regex::isLOPTVAL()		{ regex::options isLOPTVAL; }
