#!/usr/bin/env zsh
# shellcheck disable=SC1090
# ==================================================================
# swarm
# ==================================================================
# Swarm Cookbook Binary File
#
# File:         swarm
# Author:       Ragdata
# Date:         29/09/2023
# License:      MIT License
# Copyright:    Copyright © 2023 Darren (Ragdata) Poulton
# ==================================================================
# PREFLIGHT
# ==================================================================
# set debug mode = false
if [[ -z "$DEBUG" ]]; then declare -gx DEBUG=0; fi
# if script is called with 'debug' as an argument, then set debug mode
if [[ "${1:l}" == "debug" ]] || [[ "$DEBUG" == 1 ]]; then shift; DEBUG=1; set -- "${@}"; set -axeET; else set -aeET; fi
# ==================================================================
# DEPENDENCIES
# ==================================================================

# ==================================================================
# VARIABLES
# ==================================================================
#
# BUILD VARIABLES
#
declare -gx SWARM_BUILD="x"
declare -gx SWARM_VERSION="v-0.1.0"
declare -gx SWARM_BUILD_DATE="20230718-0033"
# ==================================================================
# FUNCTIONS
# ==================================================================
# ------------------------------------------------------------------
# swarm::init
# ------------------------------------------------------------------
swarm::init()
{
	local USERNAME="${SUDO_USER:-$(whoami)}"
	local ENV_FILE ENV_NODE ENV_PATHS

	ENV_FILE=/"$SWARMDIR"/cfg/.env
	ENV_NODE=/"$SWARMDIR"/cfg/.node
	ENV_PATHS=/"$SWARMDIR"/cfg/.paths

	[[ -f /"$SWARMDIR"/cfg/.init ]] && errorReturn "Node Already Initialized!"

	local NODE_IPv4 IPv4_REPORTED MANAGER_TKN WORKER_TKN NODE_ID

	source "$ENV_NODE"
	source "$ENV_PATHS"

	hashSET NODE:1 NODE_TYPE "${NODE_TYPE:-Manager}"
	writeENV NODE_TYPE "$NODE_TYPE" "$ENV_NODE"

	hashSET NODE:1 NIC_ID "${NIC_ID:-eth0}"
	writeENV NIC_ID "$NIC_ID" "$ENV_NODE"

	IPv4_REPORTED=$(ifconfig "${NIC_ID}" | awk '$2~/^flags/{_1=$1;getline;if($1~/^inet/){print $2}}')

	NODE_IPv4="${IPv4_REPORTED}"

	hashSET NODE:1 NODE_IPv4 "${NODE_IPv4}"
	writeENV NODE_IPv4 "${NODE_IPv4}" "$ENV_NODE"

	hashSET NODE:1 NODE_HOSTNAME "${NODE_HOSTNAME:-wsl}"
	writeENV NODE_HOSTNAME "$NODE_HOSTNAME" "$ENV_NODE"

	hashSET NODE:1 NODE_DOMAIN "${NODE_DOMAIN:-local}"
	writeENV NODE_DOMAIN "$NODE_DOMAIN" "$ENV_NODE"

	hashSET NODE:1 MY_USER "${MY_USER}"
	writeENV MY_USER "$MY_USER" "$ENV_NODE"

	hashSET NODE:1 ADMIN_EMAIL "${ADMIN_EMAIL:-admin@local}"
	writeENV ADMIN_EMAIL "$ADMIN_EMAIL" "$ENV_NODE"

	hashSET NODE:1 SYSTEM_EMAIL "${SYSTEM_EMAIL:-system@local}"
	writeENV SYSTEM_EMAIL "$SYSTEM_EMAIL" "$ENV_NODE"

#	sudo mv /etc/hostname /etc/hostname~
#	echo "${NODE_HOSTNAME}.${NODE_DOMAIN}" | sudo tee /etc/hostname

	sudo hostnamectl set-hostname "${NODE_HOSTNAME}.${NODE_DOMAIN}"

	docker swarm init --advertise-addr "${NODE_IPv4}"

	MANAGER_TKN="$(docker swarm join-token manager | grep SWMTKN | awk '{print $5}')"
	WORKER_TKN="$(docker swarm join-token worker | grep SWMTKN | awk '{print $5}')"

	hashSET NODE:1 MANAGER_TKN "${MANAGER_TKN}"
	writeENV MANAGER_TKN "$MANAGER_TKN" "$ENV_NODE"

	hashSET NODE:1 WORKER_TKN "${WORKER_TKN}"
	writeENV WORKER_TKN "$WORKER_TKN" "$ENV_NODE"

	NODE_ID="$(docker info -f '{{.Swarm.NodeID}}')"

	docker node update --label-add Manager-01 "${NODE_ID}"

	redis-cli RENAME NODE:1 NODE:"${NODE_ID}"

	touch /"$SWARMDIR"/cfg/.init
}
# ------------------------------------------------------------------
# swarm::info
# ------------------------------------------------------------------
swarm::info()
{
	docker node inspect self | jq
}
# ------------------------------------------------------------------
# swarm::leave
# ------------------------------------------------------------------
swarm::leave()
{
	local USERNAME="${SUDO_USER:-$(whoami)}"

	source /"$SWARMDIR"/cfg/.env

	local NODE_ID

	NODE_ID="$(docker info -f '{{.Swarm.NodeID}}')"

	redis-cli DEL NODE:"${NODE_ID}"

	docker swarm leave --force

	rm -f /"$SWARMDIR"/cfg/.init
}
# ------------------------------------------------------------------
# swarm::netinfo
# ------------------------------------------------------------------
swarm::netinfo()
{
	local USERNAME="${SUDO_USER:-$(whoami)}"

	source /"$SWARMDIR"/cfg/.env

	local NODE_ID
	local line type state send recv addr peer process row tmpFile

	NODE_ID="$(docker info -f '{{.Swarm.NodeID}}')"

	echo
	echo "===================================================================="
	echo "NETWORKS"
	echo "===================================================================="
	echo
	docker network ls -f scope=swarm
	echo
	echo "===================================================================="
	echo "ACTIVE PORTS"
	echo "===================================================================="
	echo

	tmpFile="$(mktemp)"

	echo "Type|State|Recv|Send|Local Address:Port|Peer Address:Port|Process" >> "$tmpFile"

	while IFS= read -r line
	do
		if [[ "$(echo "$line" | awk '{print $2}')" == "LISTEN" ]]; then
			type="$(echo "$line" | awk '{print $1}')"
			state="$(echo "$line" | awk '{print $2}')"
			send="$(echo "$line" | awk '{print $3}')"
			recv="$(echo "$line" | awk '{print $4}')"
			addr="$(echo "$line" | awk '{print $5}')"
			peer="$(echo "$line" | awk '{print $6}')"
			process="$(echo "$line" | awk '{print $7}')"
			row="$type|$state|$send|$recv|$addr|$peer|$process"
			echo "$row" >> "$tmpFile"
		fi
	done < <(sudo ss -tulpn)

	column "$tmpFile" -t -s "|"

	sudo rm -f "$tmpFile"
}
# ------------------------------------------------------------------
# swarm::unlock
# ------------------------------------------------------------------
swarm::unlock()
{
	local UNLOCK_KEY NODE_ID

	NODE_ID="$(docker info -f '{{.Swarm.NodeID}}')"

	UNLOCK_KEY="$(hashGET NODE:"${NODE_ID}" UNLOCK_KEY)"

	echo "${UNLOCK_KEY}" | docker swarm unlock
}
# ------------------------------------------------------------------
# swarm::version
# ------------------------------------------------------------------
# @description Reports the version and build date of this release
#
# @noargs
#
# @stdout Version, Copyright, & Build Information
# ------------------------------------------------------------------
swarm::version()
{
	local verbosity="${1:-}"

	if [[ -z "$verbosity" ]]; then
		echo "${SWARM_VERSION}"
	else
		echo
		echo "Swarm Cookbook"
		echoWhite "'swarm' Command File ${SWARM_VERSION}"
		echo "Copyright © 2022-2023 Darren (Ragdata) Poulton"
		echo "Build: ${SWARM_BUILD}"
		echo "Build Date: ${SWARM_BUILD_DATE}"
		echo
	fi
}
# ==================================================================
# MAIN
# ==================================================================
# trap 'errorHandler "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR

#initLog "/var/log/ck/swarm"

opt="${1:l}"

[[ -z "$1" ]] && opt=install

case "$opt" in
	init)
		swarm::init;;
	info)
		swarm::info;;
	leave)
		swarm::leave;;
	netinfo)
		swarm::netinfo;;
	unlock)
		swarm::unlock;;
	ver|version)
		if [[ "$#" -lt 2 ]]; then
			install::version
		else
			install::version "$2"
		fi;;
esac
