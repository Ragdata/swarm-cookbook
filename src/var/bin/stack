#!/usr/bin/env zsh
# shellcheck disable=SC1090
# ==================================================================
# stack
# ==================================================================
# Swarm Cookbook Binary File
#
# File:         stack
# Author:       Ragdata
# Date:         18/08/2023
# License:      MIT License
# Copyright:    Copyright © 2023 Darren (Ragdata) Poulton
# ==================================================================
# PREFLIGHT
# ==================================================================
# set debug mode = false
if [[ -z "$DEBUG" ]]; then declare -gx DEBUG=0; fi
# if script is called with 'debug' as an argument, then set debug mode
if [[ "${1:l}" == "debug" ]] || [[ "$DEBUG" == 1 ]]; then shift; DEBUG=1; set -- "${@}"; set -axeET; else set -aeET; fi
# ==================================================================
# DEPENDENCIES
# ==================================================================

# ==================================================================
# VARIABLES
# ==================================================================
#
# BUILD VARIABLES
#
declare -gx STACK_BUILD="x"
declare -gx STACK_VERSION="v-0.1.0"
declare -gx STACK_BUILD_DATE="20230718-0033"
# ==================================================================
# FUNCTIONS
# ==================================================================
# ------------------------------------------------------------------
# stack::deploy
# ------------------------------------------------------------------
stack::deploy()
{
	local USERNAME="${SUDO_USER:-$(whoami)}" stackFolder stackName name c serviceName

	[[ -z "$1" ]] && errorExit "Missing Arguments!"

	stackFolder="${1:-}"

	[[ ! -d /"$SWARMDIR"/stacks/"$stackFolder" ]] && errorExit "Stack '$stackFolder' Not Found!"

	if [[ -n "$2" ]]; then stackName="${2:-}"; else stackName="$stackFolder"; fi

	[[ ! -f /"$SWARMDIR"/stacks/"$stackFolder"/docker-compose.yml ]] && errorExit "Docker Compose File Not Found!"

	docker stack deploy -c /"$SWARMDIR"/stacks/"$stackFolder"/docker-compose.yml "$stackName"

	c=0

	while IFS= read -r name
	do
		serviceName="$name"
		((c + 1))
		if [[ $c -eq 1 ]]; then break; fi
	done < <(docker stack services --format "{{.Name}}" "$stackName")

	echo
	echo "===================================================================="
	echo "PROCESSES IN STACK '${stackName^^}'"
	echo "===================================================================="
	echo

	docker stack ps --no-trunc "$stackName"

	echo
	echo "===================================================================="
	echo "LOGS FOR SERVICE '${serviceName^^}'"
	echo "===================================================================="
	echo

	docker service logs --details --follow --no-trunc "$serviceName"
}
# ------------------------------------------------------------------
# stack::list
# ------------------------------------------------------------------
stack::list()
{
	docker stack ls
}
# ------------------------------------------------------------------
# stack::processes
# ------------------------------------------------------------------
stack::processes()
{
	[[ -z "$1" ]] && errorExit "Missing Arguments!"

	docker stack ps "$1"
}
# ------------------------------------------------------------------
# stack::services
# ------------------------------------------------------------------
stack::services()
{
	[[ -z "$1" ]] && errorExit "Missing Arguments!"

	docker stack services --format "table {{.ID}}	{{.Name}}	{{.Mode}}	{{.Replicas}}" "$1"
}
# ------------------------------------------------------------------
# stack::version
# ------------------------------------------------------------------
# @description Reports the version and build date of this release
#
# @noargs
#
# @stdout Version, Copyright, & Build Information
# ------------------------------------------------------------------
stack::version()
{
	local verbosity="${1:-}"

	if [[ -z "$verbosity" ]]; then
		echo "${STACK_VERSION}"
	else
		echo
		echo "Swarm Cookbook"
		echoWhite "'stack' Command File ${STACK_VERSION}"
		echo "Copyright © 2022-2023 Darren (Ragdata) Poulton"
		echo "Build: ${STACK_BUILD}"
		echo "Build Date: ${STACK_BUILD_DATE}"
		echo
	fi
}
# ==================================================================
# MAIN
# ==================================================================
# trap 'errorHandler "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR

case "${1:l}" in
	deploy)
		stack::deploy "$@";;
	ls|list)
		stack::list;;
	ps|processes)
		stack::processes "$1";;
	svc|services)
		stack::services "$1";;
	ver|version)
		if [[ "$#" -lt 2 ]]; then
			stack::version
		else
			stack::version "$2"
		fi;;
esac
