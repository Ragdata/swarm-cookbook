#!/usr/bin/env zsh
# shellcheck disable=SC1090,SC2154
# ==================================================================
# cluster
# ==================================================================
# Swarm Cookbook Binary File
#
# File:         cluster
# Author:       Ragdata
# Date:         25/08/2023
# License:      MIT License
# Copyright:    Copyright © 2023 Darren (Ragdata) Poulton
# ==================================================================
# DESCRIPTION
# ==================================================================
# The 'cluster' command allows you to create and store records which
# contain the details of each node in your cluster, and give you the
# ability to configure each node remotely via ssh / scp
# ==================================================================
# PREFLIGHT
# ==================================================================
# set debug mode = false
if [[ -z "$DEBUG" ]]; then export DEBUG=0; fi
# if script is called with 'debug' as an argument, then set debug mode
if [[ "${1:l}" == "debug" ]] || [[ "$DEBUG" == 1 ]]; then shift; DEBUG=1; set -- "${@}"; set -axeET; else set -aeET; fi
# create logFile if not already specified
if [[ -z "$logFile" ]]; then logFile=CLUSTER-"$(logTime)"; log::init "$logFile"; fi
# ==================================================================
# DEPENDENCIES
# ==================================================================
if ! grep -q 'function' <<< "$(type loadSource 2> /dev/null)"; then source /usr/local/lib/common.zsh; fi
# ==================================================================
# VARIABLES
# ==================================================================
#
# BUILD VARIABLES
#
export CLUSTER_BUILD="x"
export CLUSTER_VERSION="v-0.1.0"
export CLUSTER_BUILD_DATE="20230718-0033"
# ==================================================================
# FUNCTIONS
# ==================================================================
# ------------------------------------------------------------------
# cluster::node::add
# ------------------------------------------------------------------
cluster::node::add()
{
	local cluster

	cluster="$(cluster::getName)"

	if [[ -z "$cluster" ]]; then log::exit "cluster::node::add :: Cluster Not Found!"; fi

	DIALOG_BACKTITLE="CLUSTER MANAGER"

	local RESULT NODE_IP DEFAULT

	DEFAULT=$(hashGET "${cluster:u}" NODE_IP)

	# NODE IP
	DIALOG_TITLE="Node IP"
	DIALOG_TEXT="Enter Node IP:"
	DIALOG_INIT="${NODE_IP:-"${DEFAULT}"}"
	RESULT=$(dialog --ok-label "${OK_LABEL:-OK}" \
		--cancel-label "${CANCEL_LABEL:-Cancel}" \
		--backtitle "${DIALOG_BACKTITLE}" \
		--title "${DIALOG_TITLE}" --cr-wrap --clear \
		--inputbox "\n${DIALOG_TEXT}\n" "${HEIGHT:-15}" "${WIDTH:-50}" "${DIALOG_INIT}" 3>&1 1>&2 2>&3)
	status=$?
	case "$status" in
		0)
			[[ -z "$RESULT" ]] && log::exit "No Result Returned for NODE_IP"
			NODE_IP="$RESULT"
			hashSET "${cluster:u}" NODE_IP "$NODE_IP"
			;;
	esac

	local RESULT NODE_HOSTNAME

	# NODE HOSTNAME
	DIALOG_TITLE="Node Hostname"
	DIALOG_TEXT="Enter Node Hostname (without domain):"
	DIALOG_INIT="${NODE_HOSTNAME:-node}"
	RESULT=$(dialog --ok-label "${OK_LABEL:-OK}" \
		--cancel-label "${CANCEL_LABEL:-Cancel}" \
		--backtitle "${DIALOG_BACKTITLE}" \
		--title "${DIALOG_TITLE}" --cr-wrap --clear \
		--inputbox "\n${DIALOG_TEXT}\n" "${HEIGHT:-15}" "${WIDTH:-50}" "${DIALOG_INIT}" 3>&1 1>&2 2>&3)
	status=$?
	case "$status" in
		0)
			[[ -z "$RESULT" ]] && log::exit "No Result Returned NODE_HOSTNAME"
			NODE_HOSTNAME="$RESULT"
			hashSET "${cluster:u}" NODE_HOSTNAME "$NODE_HOSTNAME"
			;;
	esac

	local RESULT NODE_USER

	# NODE USER
	DIALOG_TITLE="Node Login User"
	DIALOG_TEXT="Enter Username:"
	DIALOG_INIT="${NODE_USER:-username}"
	RESULT=$(dialog --ok-label "${OK_LABEL:-OK}" \
		--cancel-label "${CANCEL_LABEL:-Cancel}" \
		--backtitle "${DIALOG_BACKTITLE}" \
		--title "${DIALOG_TITLE}" --cr-wrap --clear \
		--inputbox "\n${DIALOG_TEXT}\n" "${HEIGHT:-15}" "${WIDTH:-50}" "${DIALOG_INIT}" 3>&1 1>&2 2>&3)
	status=$?
	case "$status" in
		0)
			[[ -z "$RESULT" ]] && log::exit "No Result Returned for NODE_USER"
			NODE_USER="$RESULT"
			hashSET "${cluster:u}" NODE_USER "$NODE_USER"
			;;
	esac

	local RESULT NODE_PASSWORD

	# NODE USER PASSWORD
	DIALOG_TITLE="Node User Password"
	DIALOG_TEXT="Enter Password:"
	DIALOG_INIT="${NODE_PASSWORD:-}"
	RESULT=$(dialog --ok-label "${OK_LABEL:-OK}" \
		--cancel-label "${CANCEL_LABEL:-Cancel}" \
		--backtitle "${DIALOG_BACKTITLE}" \
		--title "${DIALOG_TITLE}" --cr-wrap --clear \
		--passwordbox "\n${DIALOG_TEXT}\n" "${HEIGHT:-15}" "${WIDTH:-50}" "${DIALOG_INIT}" 3>&1 1>&2 2>&3)
	status=$?
	case "$status" in
		0)
			[[ -z "$RESULT" ]] && log::exit "No Result Returned NODE_PASSWORD"
			NODE_PASSWORD="$RESULT"
			hashSET "${cluster:u}" NODE_PASSWORD "$NODE_PASSWORD"
			;;
	esac

	local RESULT NODE_TYPE
	local -a DIALOG_OPTIONS

	# NODE TYPE
	DIALOG_TITLE="Node Type"
	DIALOG_TEXT="Select Type:"
	LIST_HEIGHT=3
	DIALOG_OPTIONS=(
		"Primary" "" off
		"Manager" "" on
		"Worker" "" off
	)
	RESULT=$(dialog --ok-label "${OK_LABEL:-OK}" \
		--cancel-label "${CANCEL_LABEL:-Cancel}" \
		--backtitle "${DIALOG_BACKTITLE}" \
		--title "${DIALOG_TITLE}" --cr-wrap --clear \
		--radiolist "${DIALOG_TEXT}" "${HEIGHT:-15}" "${WIDTH:-50}" "${LIST_HEIGHT:-5}" \
		"${DIALOG_OPTIONS[@]}" 3>&1 1>&2 2>&3)
	status=$?
	case "$status" in
		0)
			NODE_TYPE="$RESULT"
			hashSET "${cluster:u}" NODE_TYPE "$NODE_TYPE"
			;;
	esac

	# SSH KEY OPT
	DIALOG_TITLE="Node SSH Auth Key"
	DIALOG_TEXT="Select whether to create or export an auth key for this node:"
	LIST_HEIGHT=3
	DIALOG_OPTIONS=(
		"Create" "" on
		"Select" "" off
	)
	RESULT=$(dialog --ok-label "${OK_LABEL:-OK}" \
		--cancel-label "${CANCEL_LABEL:-Cancel}" \
		--backtitle "${DIALOG_BACKTITLE}" \
		--title "${DIALOG_TITLE}" --cr-wrap --clear \
		--radiolist "${DIALOG_TEXT}" "${HEIGHT:-15}" "${WIDTH:-50}" "${LIST_HEIGHT:-5}" \
		"${DIALOG_OPTIONS[@]}" 3>&1 1>&2 2>&3)
	status=$?
	case "$status" in
		0)
			case "$RESULT" in
				Create) cluster::node::createKey;;
				Select) cluster::node::selectKey;;
			esac
			;;
	esac
}
# ------------------------------------------------------------------
# cluster::create
# ------------------------------------------------------------------
cluster::create()
{
	local name="${1:-}"

	if [[ -z "$name" ]]; then log::exit "cluster::create :: Missing Argument!"; fi

	stringSET CLUSTER_NAME "$1"
}
# ------------------------------------------------------------------
# cluster::getName
# ------------------------------------------------------------------
cluster::getName() { stringGET CLUSTER_NAME; }
# ------------------------------------------------------------------
# cluster::node::createKey
# ------------------------------------------------------------------
cluster::node::createKey()
{
	clear
}
# ------------------------------------------------------------------
# cluster::node::selectKey
# ------------------------------------------------------------------
cluster::node::selectKey()
{
	clear
}
# ------------------------------------------------------------------
# cluster::node::push
# ------------------------------------------------------------------
cluster::node::push()
{
	local
}
# ------------------------------------------------------------------
# cluster::node::remove
# ------------------------------------------------------------------
cluster::node::remove()
{
	local
}
# ------------------------------------------------------------------
# cluster::node::update
# ------------------------------------------------------------------
cluster::node::update()
{
	local
}
# ------------------------------------------------------------------
# cluster::help
# ------------------------------------------------------------------
cluster::help()
{
	echo
	echo "${GOLD}====================================================================${RESET}"
	echo "${WHITE}'CLUSTER' COMMAND HELP${RESET}"
	echo "${GOLD}====================================================================${RESET}"
	echo



	echo
	echo "${GOLD}====================================================================${RESET}"
	echo
}
# ------------------------------------------------------------------
# cluster::version
# ------------------------------------------------------------------
# @description Reports the version and build date of this release
#
# @noargs
#
# @stdout Version, Copyright, & Build Information
# ------------------------------------------------------------------
cluster::version()
{
	local verbosity="${1:-}"

	if [[ -z "$verbosity" ]]; then
		echo "${CLUSTER_VERSION}"
	else
		echo
		echo "Swarm Cookbook"
		echoWhite "'cluster' Command File ${CLUSTER_VERSION}"
		echo "Copyright © 2022-2023 Darren (Ragdata) Poulton"
		echo "Build: ${CLUSTER_BUILD}"
		echo "Build Date: ${CLUSTER_BUILD_DATE}"
		echo
	fi
}
# ==================================================================
# MAIN
# ==================================================================
# trap 'errorHandler "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR

opt="${1:l}"

[[ -z "$1" ]] && opt=help

case "$opt" in
	create)
		cluster::create "$2"
		;;
	node)
		case "$2" in
			add)
				cluster::node::add
				;;
			config)
				cluster::node::config
				;;
			push)
				cluster::node::push
				;;
			rm|remove)
				cluster::node::remove
				;;
			update)
				cluster::node::update
				;;
			*)
				echo "Invalid Option 'node $2'"
				exit 1
				;;
		esac
		;;
	help)
		cluster::help
		;;
	ver|version)
		if [[ "$#" -lt 2 ]]; then
			cluster::version
		else
			cluster::version "$2"
		fi;;
	*)
		echo "Invalid Option '$opt'"
		exit 1
		;;
esac
